// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dNqcW7FYVqnkjtbdVGjyS8
// Component: X-IHl2HTitKv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import sty from "./PlasmicSematicSheet.module.css"; // plasmic-import: X-IHl2HTitKv/css

createPlasmicElementProxy;

export type PlasmicSematicSheet__VariantMembers = {};
export type PlasmicSematicSheet__VariantsArgs = {};
type VariantPropType = keyof PlasmicSematicSheet__VariantsArgs;
export const PlasmicSematicSheet__VariantProps = new Array<VariantPropType>();

export type PlasmicSematicSheet__ArgsType = {};
type ArgPropType = keyof PlasmicSematicSheet__ArgsType;
export const PlasmicSematicSheet__ArgProps = new Array<ArgPropType>();

export type PlasmicSematicSheet__OverridesType = {
  root?: Flex__<"div">;
  headerSection?: Flex__<"section">;
  pageHeader?: Flex__<"div">;
  designSystemHeaderTitleStack?: Flex__<"div">;
  availabilityStack?: Flex__<"div">;
  noteStack?: Flex__<"div">;
  componentTitleStack?: Flex__<"div">;
  bodySection?: Flex__<"section">;
  bodyTitle?: Flex__<"div">;
  h3?: Flex__<"h3">;
  footerSection?: Flex__<"section">;
  pageFooter?: Flex__<"div">;
  designSystemFooterTitle?: Flex__<"div">;
};

export interface DefaultSematicSheetProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSematicSheet__RenderFunc(props: {
  variants: PlasmicSematicSheet__VariantsArgs;
  args: PlasmicSematicSheet__ArgsType;
  overrides: PlasmicSematicSheet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_core_css.plasmic_tokens,
            sty.root,
            {
              [plasmic_core_css.global_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              ),
              [sty.rootglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            }
          )}
        >
          <section
            data-plasmic-name={"headerSection"}
            data-plasmic-override={overrides.headerSection}
            className={classNames(projectcss.all, sty.headerSection)}
          >
            <div
              data-plasmic-name={"pageHeader"}
              data-plasmic-override={overrides.pageHeader}
              className={classNames(projectcss.all, sty.pageHeader)}
            >
              <div
                data-plasmic-name={"designSystemHeaderTitleStack"}
                data-plasmic-override={overrides.designSystemHeaderTitleStack}
                className={classNames(
                  projectcss.all,
                  sty.designSystemHeaderTitleStack
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p0CNi
                  )}
                >
                  {"Seventeen Sierra\nDesign System"}
                </div>
              </div>
              <div
                data-plasmic-name={"availabilityStack"}
                data-plasmic-override={overrides.availabilityStack}
                className={classNames(projectcss.all, sty.availabilityStack)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d8Ic6
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Toolkit Status"}
                    </span>
                    <React.Fragment>{"\nN/A"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"noteStack"}
                data-plasmic-override={overrides.noteStack}
                className={classNames(projectcss.all, sty.noteStack)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e2UO2
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Status Notes:"}
                    </span>
                    <React.Fragment>{" Design system atom"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"componentTitleStack"}
                data-plasmic-override={overrides.componentTitleStack}
                className={classNames(projectcss.all, sty.componentTitleStack)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fbULx
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Semantic"}
                    </span>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"bodySection"}
            data-plasmic-override={overrides.bodySection}
            className={classNames(projectcss.all, sty.bodySection)}
          >
            <div
              data-plasmic-name={"bodyTitle"}
              data-plasmic-override={overrides.bodyTitle}
              className={classNames(projectcss.all, sty.bodyTitle)}
            >
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {"Semantic"}
              </h3>
            </div>
          </section>
          <section
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames(projectcss.all, sty.footerSection)}
          >
            <div
              data-plasmic-name={"pageFooter"}
              data-plasmic-override={overrides.pageFooter}
              className={classNames(projectcss.all, sty.pageFooter)}
            >
              <div
                data-plasmic-name={"designSystemFooterTitle"}
                data-plasmic-override={overrides.designSystemFooterTitle}
                className={classNames(
                  projectcss.all,
                  sty.designSystemFooterTitle
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cCwB
                  )}
                >
                  {"Seventeen Sierra\nDesign System"}
                </div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSection",
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack",
    "bodySection",
    "bodyTitle",
    "h3",
    "footerSection",
    "pageFooter",
    "designSystemFooterTitle"
  ],
  headerSection: [
    "headerSection",
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack"
  ],
  pageHeader: [
    "pageHeader",
    "designSystemHeaderTitleStack",
    "availabilityStack",
    "noteStack",
    "componentTitleStack"
  ],
  designSystemHeaderTitleStack: ["designSystemHeaderTitleStack"],
  availabilityStack: ["availabilityStack"],
  noteStack: ["noteStack"],
  componentTitleStack: ["componentTitleStack"],
  bodySection: ["bodySection", "bodyTitle", "h3"],
  bodyTitle: ["bodyTitle", "h3"],
  h3: ["h3"],
  footerSection: ["footerSection", "pageFooter", "designSystemFooterTitle"],
  pageFooter: ["pageFooter", "designSystemFooterTitle"],
  designSystemFooterTitle: ["designSystemFooterTitle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSection: "section";
  pageHeader: "div";
  designSystemHeaderTitleStack: "div";
  availabilityStack: "div";
  noteStack: "div";
  componentTitleStack: "div";
  bodySection: "section";
  bodyTitle: "div";
  h3: "h3";
  footerSection: "section";
  pageFooter: "div";
  designSystemFooterTitle: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSematicSheet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSematicSheet__VariantsArgs;
    args?: PlasmicSematicSheet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSematicSheet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSematicSheet__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSematicSheet__ArgProps,
          internalVariantPropNames: PlasmicSematicSheet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSematicSheet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSematicSheet";
  } else {
    func.displayName = `PlasmicSematicSheet.${nodeName}`;
  }
  return func;
}

export const PlasmicSematicSheet = Object.assign(
  // Top-level PlasmicSematicSheet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSection: makeNodeComponent("headerSection"),
    pageHeader: makeNodeComponent("pageHeader"),
    designSystemHeaderTitleStack: makeNodeComponent(
      "designSystemHeaderTitleStack"
    ),
    availabilityStack: makeNodeComponent("availabilityStack"),
    noteStack: makeNodeComponent("noteStack"),
    componentTitleStack: makeNodeComponent("componentTitleStack"),
    bodySection: makeNodeComponent("bodySection"),
    bodyTitle: makeNodeComponent("bodyTitle"),
    h3: makeNodeComponent("h3"),
    footerSection: makeNodeComponent("footerSection"),
    pageFooter: makeNodeComponent("pageFooter"),
    designSystemFooterTitle: makeNodeComponent("designSystemFooterTitle"),

    // Metadata about props expected for PlasmicSematicSheet
    internalVariantProps: PlasmicSematicSheet__VariantProps,
    internalArgProps: PlasmicSematicSheet__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSematicSheet;
/* prettier-ignore-end */
